const MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],MONTH_ROWS=[[0,1,2],[3,4,5],[6,7,8],[9,10,11]],configInput=document.getElementById("config-input"),saveButton=document.getElementById("save-button"),calendarContainer=document.getElementById("calendar-container"),timezoneSelect=document.getElementById("timezone-select"),modal=document.getElementById("color-picker-modal"),closeBtn=modal?.querySelector(".close"),colorInput=document.getElementById("color-input"),applyColorBtn=document.getElementById("apply-color");let lastHashPosition=null;function openModal(){modal.style.display="block",colorInput.focus()}function closeModal(){modal.style.display="none"}function insertColorAtPosition(e){const t=configInput.value,n=t.slice(0,lastHashPosition),o=n+e+t.slice(lastHashPosition+1);configInput.value=o;const a=n.length+e.length;configInput.selectionStart=a,configInput.selectionEnd=a,configInput.focus(),lastHashPosition=null}function getCurrentTimezone(){const e=timezoneSelect.value;return"auto"===e?luxon.DateTime.local().zoneName:e}function parseDateInTimezone(e,t){return luxon.DateTime.fromISO(e,{zone:t}).startOf("day").toJSDate()}function generateCalendar(e,t,n){calendarContainer.innerHTML="";const o=t.map(((e,t)=>{const o={...e,order:t};return e.start&&(o.startDate=parseDateInTimezone(e.start,n)),e.end&&(o.endDate=parseDateInTimezone(e.end,n)),e.dates&&(o.dateObjects=e.dates.map((e=>parseDateInTimezone(e,n)))),o}));for(const t of e){const e=document.createElement("div");e.className="calendar";const n=document.createElement("h2");n.textContent=t.toString(),e.appendChild(n);const a=new Set,r=document.createElement("table");r.className="year-table";const l=document.createElement("tbody");for(const e of MONTH_ROWS){const n=document.createElement("tr");for(const r of e){const e=document.createElement("td");e.appendChild(createMonthTable(t,r,o,a)),n.appendChild(e)}l.appendChild(n)}r.appendChild(l),e.appendChild(r);const c=Array.from(a).map((e=>o[e])).filter((e=>e.label));if(c.length>0){const t=document.createElement("div");t.className="legend";for(const e of c){const n=document.createElement("div");n.className="legend-item";const o=document.createElement("div");o.className="legend-color",o.style.backgroundColor=e.color;const a=document.createElement("span");a.textContent=e.label,n.appendChild(o),n.appendChild(a),t.appendChild(n)}e.appendChild(t)}calendarContainer.appendChild(e)}}function createMonthTable(e,t,n,o){const a=document.createElement("table");a.className="month-table";const r=document.createElement("thead"),l=document.createElement("tr");l.className="month-name-row";const c=document.createElement("th");c.colSpan=7,c.textContent=`${MONTH_NAMES[t]} ${e}`,l.appendChild(c),r.appendChild(l);const s=document.createElement("tr");s.className="weekday-row";const i=["Su","Mo","Tu","We","Th","Fr","Sa"];for(const e of i){const t=document.createElement("th");t.textContent=e,s.appendChild(t)}r.appendChild(s),a.appendChild(r);const d=document.createElement("tbody"),m=new Date(e,t,1).getDay(),u=new Date(e,t+1,0).getDate(),p=m+u,g=Math.ceil(p/7);let f=1;for(let a=0;a<g;a++){const r=document.createElement("tr");for(let l=0;l<7;l++){const c=document.createElement("td");if(7*a+l>=m&&f<=u){c.textContent=f.toString();const a=new Date(e,t,f);a.setHours(0,0,0,0);const r=[];for(let e=0;e<n.length;e++){const t=n[e];if(t.startDate&&t.endDate)a>=t.startDate&&a<=t.endDate&&(r.push(t.color),o.add(e));else if(t.dateObjects)for(const n of t.dateObjects)a.getTime()===n.getTime()&&(r.push(t.color),o.add(e))}r.length>0&&(c.style.background=generateGradient(r)),f++}else c.textContent="";r.appendChild(c)}d.appendChild(r)}return a.appendChild(d),a}function generateGradient(e){const t=100/e.length;return`linear-gradient(to bottom, ${e.map(((e,n)=>`${e} ${t*n}%, ${e} ${t*(n+1)}%`)).join(", ")})`}function compressYAML(e){try{const t=jsyaml.load(e),n=[[],[]];if(t.years){const e=t.years.map((e=>e-2024));n[0]=e}if(t.highlightPeriods){const e=t.highlightPeriods.map((e=>{if(e.start&&e.end&&e.color){const t=Math.floor(new Date(e.start).getTime()/1e5),n=new Date(e.start),o=new Date(e.end),a=[t,Math.ceil((o.getTime()-n.getTime())/864e5),e.color];return e.label&&a.push(e.label),a}if(e.dates&&e.color){const t=e.dates.map((e=>Math.floor(new Date(e).getTime()/1e5))).sort(((e,t)=>e-t));if(1===t.length){const n=[t[0],e.color];return e.label&&n.push(e.label),n}{const n=t[0],o=t.slice(1).map((e=>(e-n)/864)),a=[[n,...o],e.color];return e.label&&a.push(e.label),a}}return e}));n[1]=e}t.timezone&&"auto"!==t.timezone&&(n[2]=t.timezone);return JSON.stringify(n).slice(1,-1)}catch(e){return console.error("Error compressing YAML:",e),null}}function decompressJSON(e){try{const t=`[${e}]`,n=JSON.parse(t),o={};return n[0]&&(o.years=n[0].map((e=>e+2024))),n[1]&&(o.highlightPeriods=n[1].map((e=>{if(Array.isArray(e)){if("number"==typeof e[0]&&"number"==typeof e[1]){const t=1e5*e[0],n=new Date(t).toISOString().split("T")[0]||"",o=e[1],a={start:n,end:new Date(t+24*o*60*60*1e3).toISOString().split("T")[0]||"",color:e[2]};return e[3]&&(a.label=e[3]),a}if(Array.isArray(e[0])){const t=1e5*e[0][0],n=e[0].slice(1),o=[new Date(t).toISOString().split("T")[0]||""];n.forEach((e=>{const t=new Date(new Date(o[o.length-1]).getTime()+864e5*e);o.push(t.toISOString().split("T")[0]||"")}));const a={dates:o,color:e[1]};return e[2]&&(a.label=e[2]),a}{const t={dates:[new Date(1e5*e[0]).toISOString().split("T")[0]||""],color:e[1]};return e[2]&&(t.label=e[2]),t}}return e}))),n[2]&&(o.timezone=n[2]),jsyaml.dump(o)}catch(e){return console.error("Error decompressing JSON:",e),null}}function getConfigFromURL(){const e=new URLSearchParams(window.location.search).get("config");if(e)try{return decompressJSON(LZString.decompressFromEncodedURIComponent(e))}catch(e){const t=e;console.error("[getConfigFromURL] Error:",t),alert(`Error decoding configuration from URL: ${t.message}`)}return null}function updateURLWithConfig(e){const t=compressYAML(e);if(t){const e=LZString.compressToEncodedURIComponent(t),n=`${window.location.protocol}//${window.location.host}${window.location.pathname}?config=${e}`;window.history.replaceState({path:n},"",n)}}function init(){const e=getConfigFromURL();if(e){configInput.value=e;try{const t=jsyaml.load(e);t.timezone&&(timezoneSelect.value=t.timezone)}catch(e){console.error("[Init] Error parsing config from URL:",e)}}else{const e=(new Date).getFullYear();configInput.value=`years:\n  - ${e}\nhighlightPeriods:\n  - start: '${e}-12-01'\n    end: '${e}-12-31'\n    color: '#ffd700'  # gold\n    label: 'Festival Break'\n  - dates:\n      - '${e}-01-13'\n    color: '#ff6b6b'  # coral red\n    label: 'Important Day'\n`}saveButton.click()}configInput.addEventListener("keydown",(e=>{"#"===e.key&&setTimeout((()=>{lastHashPosition=configInput.selectionStart-1,openModal()}),0)})),closeBtn.addEventListener("click",closeModal),window.addEventListener("click",(e=>{e.target===modal&&closeModal()})),applyColorBtn.addEventListener("click",(()=>{const e=colorInput.value;null!==lastHashPosition&&insertColorAtPosition(e),closeModal()})),saveButton.addEventListener("click",(()=>{const e=configInput.value;try{const t=jsyaml.load(e),n=t.years,o=t.highlightPeriods,a=getCurrentTimezone();if(!Array.isArray(n)||!Array.isArray(o))throw new Error("Invalid configuration format.");generateCalendar(n,o,a);const r={...t,timezone:a};updateURLWithConfig(jsyaml.dump(r))}catch(e){const t=e;console.error("[Save] Error:",t),alert(`Error parsing configuration: ${t.message}`)}})),init();